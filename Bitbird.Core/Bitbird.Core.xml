<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bitbird.Core</name>
    </assembly>
    <members>
        <member name="T:Bitbird.Core.Expressions.MergeInitHelperExtension">
            <summary>
            Class for Merge extension methods.
            Source: https://coding.abel.nu/2013/01/merging-expression-trees-to-reuse-in-linq-queries/
            </summary>
        </member>
        <member name="M:Bitbird.Core.Expressions.MergeInitHelperExtension.Merge``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
            <summary>
            Merges the member initialization list of two lambda expressions into one.
            </summary>
            <typeparam name="TSource">Source type.</typeparam>
            <typeparam name="TBaseDest">Resulting type of the base mapping expression. TBaseDest is
            typically a super class of TExtendedDest</typeparam>
            <typeparam name="TExtendedDest">Resulting type of the extended mapping expression.</typeparam>
            <param name="baseExpression">The base mapping expression, containing a member 
            initialization expression.</param>
            <param name="mergeExpression">The extended mapping expression to be merged into the
            base member initialization expression.</param>
            <returns>Resulting expression, after the merged select expression has been applied.</returns>
        </member>
        <member name="T:Bitbird.Core.Expressions.MergeInitHelperExtension.MergingVisitor`3">
            <summary>
            The merging visitor doing the actual merging work.
            </summary>
            <typeparam name="TSource">Source data type.</typeparam>
            <typeparam name="TBaseDest">Resulting type of the base query.</typeparam>
            <typeparam name="TExtendedDest">Resulting type of the merged expression.</typeparam>
        </member>
        <member name="T:Bitbird.Core.Expressions.MergeInitHelperExtension.MergingVisitor`3.LambdaRebindingVisitor">
            <summary>
            Internal helper, that rebinds the lambda of the base init expression. The
            reason for this is that the member initialization list of the base expression
            is bound to the range variable in the base expression. To be able to merge those
            into the extended expression, all those references have to be rebound to the
            range variable of the extended expression. That rebinding is done by this helper.
            </summary>
        </member>
        <member name="M:Bitbird.Core.Expressions.MergeInitHelperExtension.MergingVisitor`3.LambdaRebindingVisitor.#ctor(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Ctor.
            </summary>
            <param name="newParameter">The range vaiable of the extended expression.</param>
            <param name="oldParameter">The range variable of the base expression.</param>
        </member>
        <member name="M:Bitbird.Core.Expressions.MergeInitHelperExtension.MergingVisitor`3.LambdaRebindingVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Whenever a memberaccess is done that access the old parameter, rewrite
            it to access the new parameter instead.
            </summary>
            <param name="node">Member expression to visit.</param>
            <returns>Possibly rewritten member access node.</returns>
        </member>
        <member name="M:Bitbird.Core.Expressions.MergeInitHelperExtension.MergingVisitor`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Ctor
            </summary>
            <param name="baseExpression">The base expression to merge
            into the member init list of the extended expression.</param>
        </member>
        <member name="M:Bitbird.Core.Expressions.MergeInitHelperExtension.MergingVisitor`3.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Pick up the extended expressions range variable.
            </summary>
            <typeparam name="T">Not used</typeparam>
            <param name="node">Lambda expression node</param>
            <returns>Unmodified expression tree</returns>
        </member>
        <member name="M:Bitbird.Core.Expressions.MergeInitHelperExtension.MergingVisitor`3.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visit the member init expression of the extended expression. Merge the base 
            expression into it.
            </summary>
            <param name="node">Member init expression node.</param>
            <returns>Merged member init expression.</returns>
        </member>
        <member name="T:Bitbird.Core.IId`1">
            <summary>
            An object that can be uniquely identified among other objects of the same type by an id.
            </summary>
            <typeparam name="T">The id's data-type. Simple types are recommended.</typeparam>
        </member>
        <member name="P:Bitbird.Core.IId`1.Id">
            <summary>
            An id that uniquely identifies this object among other objects of the same type.
            </summary>
        </member>
        <member name="T:Bitbird.Core.IIdSetter`1">
            <inheritdoc />
        </member>
        <member name="P:Bitbird.Core.IIdSetter`1.Id">
            <summary>
            See <see cref="T:Bitbird.Core.IId`1"/>.
            </summary>
        </member>
        <member name="T:Bitbird.Core.Tasks.AsyncHelper">
            <summary>
            See <see href="https://stackoverflow.com/questions/5095183/how-would-i-run-an-async-taskt-method-synchronously"/>.
            </summary>
        </member>
        <member name="M:Bitbird.Core.Tasks.AsyncHelper.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes an async <see cref="T:System.Threading.Tasks.Task`1"/> method which has a void return value synchronously.
            </summary>
            <param name="task"><see cref="T:System.Threading.Tasks.Task`1"/> method to execute.</param>
        </member>
        <member name="M:Bitbird.Core.Tasks.AsyncHelper.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes an async <see cref="T:System.Threading.Tasks.Task`1"/> method which has a T return type synchronously.
            </summary>
            <typeparam name="T">Return type of the task and therefore this method.</typeparam>
            <param name="task"><see cref="T:System.Threading.Tasks.Task`1"/> method to execute.</param>
            <returns>The value returned by the task.</returns>
        </member>
    </members>
</doc>
